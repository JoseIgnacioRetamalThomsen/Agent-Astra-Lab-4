agent Main {
    module EIS ei;
    module Console C;
    module Debug debug;
    module Strings strings;
    module Functions functions;
    module System system;

    types towerOntology {
        formula tower(string, string, string );
        formula block(string);
        formula on(string,string);
        formula holding(string);
    }

    inference tower(string A, string B, string C) : -ei.on(A, B) & ei.on(B, C) & ei.on(C, "table");

    rule +!main(list args) {
      ei.launch("hw","dependency/tower-1.3.0.jar");
      ei.init();
	    ei.join();
      ei.link("gripper");
	    ei.startEnv();
      C.println("Add 3 blocks for me to build a tower, when i finish you can add more please...");
    }

    rule +on(string C,"table"):block(C) &block(string B) & block(string A)  & on(B,"table") & 
    on(A,"table") & A ~=B & A ~= C & C ~=B & ~on(string any, C) &~on(string any, B)&~on(string any, A){
        C.println("Yeah I can build a tower now!!! TOWER! TOWER!");
        !tower(B,A,C);
    }

    rule +!tower(string a, string b, string c): block(a) & block(b) & block(c){
        !on(b,c);
        !on(a,b);
        ei.nil();
        +tower(a,b,c);
    } 

    rule +!on(string A, string B): block(A) & block(B){
        ei.pickup(A);
        wait(holding(A));
        ei.putdown(A,B);
        wait(on(A,B));

    }

     rule +$ei.event(funct belief) {
        string block = functions.valueAsString(belief,0);
        //C.println("belief event=" + belief + " for block="+ block);
      if(functions.functor(belief)=="block"){
            //C.println("new block="+functions.valueAsString(belief,0) );
            +block(block);
      }else if(functions.functor(belief)=="on"){
         // C.println("new on block="+ functions.valueAsString(belief,0)+" is on " + functions.valueAsString(belief,1));
          if(on(block ,string B)) {
             // C.println("block=  "+functions.valueAsString(belief,0) + " was  already on=" + B +" removing that belief.");
              -on(block, B);
          }
          //C.println("Adding belif that block=" +functions.valueAsString(belief,0)+ " is on " +  functions.valueAsString(belief,1));
          -holding(block);
          +on( block,functions.valueAsString(belief,1) );

      }else if(functions.functor(belief)=="holding"){
        -on(block,string any);
        +holding(block);
      }
    }
}
