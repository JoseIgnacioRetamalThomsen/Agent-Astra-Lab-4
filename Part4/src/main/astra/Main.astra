agent Main {
    module EIS ei;
    module Console C;
    module Debug debug;
    module Functions functions;
    module System system;
    module ObjectAccess oa;
    module Prelude prelude;

    types towerOntology {
        formula block(string);
        formula on(string,string);
        formula holding(string);
        formula towerToBuild(list);
        formula blocks(list);
        formula tower(list);
    }

    initial blocks([]);

    rule +!main(list args) {
      ei.launch("hw","dependency/tower-1.3.0.jar");
      ei.init();
	    ei.join();
      ei.link("gripper");
	    ei.startEnv();    
      C.println("Press New Block until block g is created...");
      wait(block("g"));
      !randomTower();
    }

    //somethimes it get stuck, I think is because the wait fails.
    rule +!randomTower(): blocks(list L){
      Object obj = oa.create("ListHelper");
      forall (string s : L) {
        oa.set(obj, "toAdd", s);
        oa.invoke(obj, addToList());
      }
      oa.invoke(obj, randomize());
      list toBuild = oa.toList(obj, "list");
      -+towerToBuild(toBuild);
      list inversed = [];
      forall(string s : toBuild){
        inversed =   [s] + inversed;
      }
      C.println("Waiting on+ "+ inversed);
      wait(tower(inversed));
      C.println("finish wait");
      system.sleep(20000);
      !randomTower();
    }

    rule +towerToBuild(list T){ 
      C.println("I need to build this tower now: " + T); 
      !buildFoundation(T,"table");
    }

    rule +towerToBuild(list T){}

    rule +!buildFoundation([string H | list T],string B): ~on(string any, H) & on(H, "table"){
      C.println("Foundation is Ok we can start the tower=r=" +[H] + T);
      !build(T,H);
    }

    rule +!buildFoundation([string H | list T],string B): on(string any, H) {
      C.println("buildFoundation, "+ any +" is on the foundation " + H);
      !!removeF(any);
    }

    rule +!buildFoundation([string H | list T],string B):  ~on(H, "table"){
      C.println("Fundation="+ H +" is not in the table.");
      !removeF(H);
    }

    rule +!removeF(string A):~on(string B, A){
      C.println("Fundation RemoveF = " + A);
      ei.pickup(A);
      system.sleep(100);
      wait(holding(A));
      system.sleep(100);
      ei.putdown(A,"table");
      system.sleep(100);
      wait(on(A,"table"));
      system.sleep(100);
      //remove from tower if it was in one.
      foreach(tower(list towersList)){
        if(prelude.contains(towersList, A)){
          list newTower = prelude.tail( towersList);
          C.println("new tower="+newTower);
          C.println("removing+ " +towersList);
          -tower(towersList);
          if(prelude.size(newTower)>1){
            +tower(newTower);
          }
        }
      }
      debug.dumpBeliefs();
      !redoF();
    }

    rule +!removeF(string A):on(string B, A){
      C.println("Fundation " + A + " can't be removed  we need to remove " + B + " first.");
      !removeF(B);
    }

    rule +!redoF():towerToBuild(list T){ 
      C.println("Restart foundation tower = " + T);
      !buildFoundation(T,"table");
    }

    rule +!build([string H | list T],string B):~on(string any, H) {
      C.println(" Build tower =" + [B] +[H] +T );
      string h =H;
      string b = B;
      list fullList =[B] +[H] +T  ;
      list notBuild = [H] + T ;
      !on(H,B);
      wait(on(H,B));
      debug.dumpBeliefs();
      C.println("on("+H+","+B+") done");  
      !build(T,H);
    }

    rule +!build([string H | list T],string B):on(string A, H) {
      C.println("Build "+H+" not availible is on =" + A);
      !remove(A);
    }

    rule +!remove(string A):~on(string B, A){
      C.println("Build  remove "  +A);
      ei.pickup(A);
      system.sleep(100);
      wait(holding(A));
      system.sleep(100);
      ei.putdown(A,"table");
      system.sleep(100);
      wait(on(A,"table"));
      system.sleep(100);
      // remove from tower if it was in one
      foreach(tower(list towersList)){
          if(prelude.contains(towersList, A)){
            C.println("contains "+ towersList);
            list newTower = prelude.tail( towersList);
            -tower(towersList);
            if(prelude.size(newTower)>1){
              +tower(newTower);
            }
        }
      }
      debug.dumpBeliefs();
      !redo(); 
    }

    rule +!remove(string A):on(string B, A){
      C.println("Build I can't remove "+ A +", will need to remove "+ B +" first.");
      !remove(B);
    }

    rule +!redo():towerToBuild([string H | list T]){
      C.println("Build redo tower=" + T);
      !build(T,H);
    }
    
    rule +!build([],string B){
      C.println("i finish");
      ei.nil();
      debug.dumpBeliefs();
    }

    rule +!on(string A, string B):block(A) &~block(B){

    }

    rule +!on(string A, string B): block(A) & block(B){
      C.println("Build on " + A + " " + B);
        ei.pickup(A);
        C.println("Pick up  " + A );
        system.sleep(100);
        wait(holding(A));
        //remove from tower if it was in one
        foreach(tower(list towersList)){
          if(prelude.contains(towersList, A)){
            list newTower = prelude.tail( towersList);
            -tower(towersList);
            if(prelude.size(newTower)>1){
              +tower(newTower);
            }
        }
      }

        ei.putdown(A,B);
        C.println("PutDown  " + A + " on " + B);
        system.sleep(100);
        wait(on(A,B));
        system.sleep(100);
        C.println("Done PutDown  " + A + " on " + B);
        //add to tower 
        boolean isTower=false;
        foreach(tower(list towersList)){
          if(prelude.contains(towersList, B)){
            isTower=true;
            list newTower = [A] + towersList;
            -tower(towersList);
            +tower(newTower);
          }
      }
      // create new tower if is first
      if(isTower==false){
          list toAdd = [A,B];
          C.println("tower to add=" + toAdd);
          +tower(toAdd);
          wait(tower(toAdd));
      }
      debug.dumpBeliefs();
    }

    rule +$ei.event(funct belief) : blocks(list L) {
        string block = functions.valueAsString(belief,0);
        //C.println("belief event=" + belief + " for block="+ block);
        if(functions.functor(belief)=="block"){
            //C.println("new block="+functions.valueAsString(belief,0) );   
            -blocks(L);
            list L1 = L+ [block];
            +blocks(L1);
            +block(block);
      }else if(functions.functor(belief)=="on"){
         // C.println("new on block="+ functions.valueAsString(belief,0)+" is on " + functions.valueAsString(belief,1));
          if(on(block ,string B)) {
             // C.println("block=  "+functions.valueAsString(belief,0) + " was  already on=" + B +" removing that belief.");
              -on(block, B);
          }
          //C.println("Adding belif that block=" +functions.valueAsString(belief,0)+ " is on " +  functions.valueAsString(belief,1));
          -holding(block);
          +on( block,functions.valueAsString(belief,1) );
      }else if(functions.functor(belief)=="holding"){       
       // C.println(block);
        -on(block,string any);
        +holding(block);
      }
    }
}
